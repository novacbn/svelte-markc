const PACKAGE_MANIFEST = require("../../package.json");

const _ = require("lodash");
const {full} = require("acorn-walk");
const {Parser} = require("acorn");

/**
 * Returns a new `Point` structure used by unist-based Nodes for source code lookup
 * @param {*} column
 * @param {*} line
 * @param {*} offset
 */
function make_point(column, line, offset) {
    // Columns for unist-based nodes are 1-indexed
    column = column + 1;

    return {
        column,
        line,
        offset
    };
}

/**
 * Returns a new `Position` structure used by unist-based Nodes for source code lookup
 * @param {*} node
 */
function make_position(node) {
    const {loc} = node;
    const {end, start} = loc;

    return {
        end: make_point(end.column, end.line, node.end),
        start: make_point(start.column, start.line, node.start)
    };
}

/**
 * Returns a ESTree-based abstract syntax tree converted to be unist-based Node compatible
 * @param {*} ast
 */
function estree_to_unist(ast) {
    // Need to merge with empty to preserve immutability
    ast = _.merge({}, ast);

    full(ast, (node) => {
        if (node.loc) node.position = make_position(node);
    });

    return ast;
}

/**
 * Returns the `Map<string, unknown>` key-values parsed into an array ESTree nodes exporting the values
 * @param {*} export_map
 * @param {*} format
 */
function make_export_nodes(export_map, format = "esm") {
    // HACK: Should actually properly build the Nodes via objects, but
    // it was faster to throw something together with `acorn`
    let script = Array.from(export_map);
    const source_type = format === "esm" ? "module" : "script";

    if (format === "cjs") {
        script = script.map(([key, value], index) => {
            return `const ${key} = ${JSON.stringify(value)};\nexports.${key} = ${key};`;
        });
    } else if (format === "esm") {
        script = script.map(([key, value], index) => {
            return `export const ${key} = ${JSON.stringify(value)};`;
        });
    } else {
        throw new Exception(`bad dispatch to 'format_export_map' (format '${format}' not valid)`);
    }

    script = `/* generated by svelte-markc v${PACKAGE_MANIFEST.version} */\n` + script.join("\n");

    return Parser.parse(script, {sourceType: source_type}).body;
}

module.exports = {
    estree_to_unist,
    make_export_nodes
};
